using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using DSharpPlus;
using DSharpPlus.Entities;
using DSharpPlus.Net.WebSocket;
using Sandbox.Game.Multiplayer;
using Sandbox.Game.World;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Text.RegularExpressions;
using System.Threading;
using System.Threading.Tasks;
using Torch.API.Managers;
using Torch.API.Session;
using Torch.Commands;
using VRage.Game;
using VRage.Game.ModAPI;
using Sandbox.Engine.Multiplayer;

namespace ALE_Biggest_Grids_Broadcast.ALE_Biggest_Grids_Broadcast.GridDetection
{
    public class DiscordBridge
    {
        private GridsBroadcastPlugin Plugin;
        private DiscordActivity game;
        private string lastMessage = "";
        private ulong botId = 0;

        public bool Ready { get; set; } = false;
        public static DiscordClient Discord { get; set; }
        public DiscordBridge (GridsBroadcastPlugin plugin)
        {
          Plugin = plugin;
        }
        private async void RunGameTask(Action obj)
        {
            if (Plugin.Torch.CurrentSession != null)
            {
                await Plugin.Torch.InvokeAsync(obj);
            }
            else
            {
                await Task.Run(obj);
            }
        }

        public void Stopdiscord()
        {
            RunGameTask(() =>
            {
                DisconnectDiscord().ConfigureAwait(false).GetAwaiter().GetResult();
            });
        }

        private async Task DisconnectDiscord()
        {
            Ready = false;
            await Discord?.DisconnectAsync();
        }

        private Task RegisterDiscord()
        {
            try
            {
                // Windows Vista - 8.1
                if (Environment.OSVersion.Platform.Equals(PlatformID.Win32NT) && Environment.OSVersion.Version.Major == 6)
                {
                    Discord = new DiscordClient(new DiscordConfiguration
                    {
                        Token = Plugin.Config.BotToken,
                        TokenType = TokenType.Bot,
                        WebSocketClientFactory = WebSocket4NetClient.CreateNew
                    });
                }
                else
                {
                    Discord = new DiscordClient(new DiscordConfiguration
                    {
                        Token = Plugin.Config.BotToken,
                        TokenType = TokenType.Bot
                    });
                }
            }
            catch (Exception) { }

            Discord.ConnectAsync();

            Discord.MessageCreated += Discord_MessageCreated;
            game = new DiscordActivity();

            Discord.Ready += async e =>
            {
                Ready = true;
                await Task.CompletedTask;
            };
            return Task.CompletedTask;
        }

        public void SendStatus(string status)
        {
            if (Ready && status?.Length > 0)
            {
                game.Name = status;
                Discord.UpdateStatusAsync(game);
            }
        }



        public void SendChatMessage(string user, string msg)
        {
            RunGameTask(() =>
            {
                try
                {
                    if (lastMessage.Equals(user + msg)) return;

                    if (Ready && Plugin.Config.DiscordChannelId > 0)
                    {
                        DiscordChannel chann = Discord.GetChannelAsync(Plugin.Config.DiscordChannelId).Result;
                        //mention
                      

                   
                        botId = Discord.SendMessageAsync(chann, msg.Replace("/n", "\n")).Result.Author.Id;
                    }
                }
                catch (Exception e)
                {
                    try
                    {
                        DiscordChannel chann = Discord.GetChannelAsync(Plugin.Config.DiscordChannelId).Result;
                        botId = Discord.SendMessageAsync(chann, e.ToString()).Result.Author.Id;
                    }
                    catch (Exception ex)
                    {
                        
                    }
                }
            });
        }

        public static string GetStringBetweenCharacters(string input, char charFrom, char charTo)
        {
            int posFrom = input.IndexOf(charFrom);
            if (posFrom != -1) //if found char
            {
                int posTo = input.IndexOf(charTo, posFrom + 1);
                if (posTo != -1) //if found char
                {
                    return input.Substring(posFrom + 1, posTo - posFrom - 1);
                }
            }

            return string.Empty;
        }
        private Task Discord_MessageCreated(DSharpPlus.EventArgs.MessageCreateEventArgs e)
        {
            if (e.Channel.Id == Plugin.Config.DiscordChannelId)
            {
               if (e.Author.IsBot)
                {

                   string serverName = e.Message.Content.Substring(0);
         
                  
                    string serverWorldName = MyMultiplayer.Static.WorldName;
                    if (!serverName.Equals(serverWorldName)){

                    }
                }
               else
                {

                }

    
            }
            return Task.CompletedTask;
        }
    }
}
